security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                username_path: email
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_security_login
                check_path: app_security_login
            logout:
                path: app_security_logout


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:

        # * CRUD operation are accessible only for the admin, you can only see the list of comics if you are not connected or only as user
        - { path: ^/admin, roles: ROLE_ADMIN }
#         - { path: ^/api/wish-list/remove/\d+, roles: ROLE_USER }
#         - { path: ^/api/own-list/remove/\d+, roles: ROLE_USER }
#         - { path: ^/api/wish-list/add/\d+, roles: ROLE_USER }
#         - { path: ^/api/own-list/add/\d+, roles: ROLE_USER }
#         - { path: ^/api/wish-list, roles: ROLE_USER }
#         - { path: ^/api/own-list, roles: ROLE_USER }
#         - { path: ^/api/character/\d+, roles: PUBLIC_ACCESS }
#         - { path: ^/api/home-character, roles: PUBLIC_ACCESS }
#         - { path: ^/api/character/\d+, roles: PUBLIC_ACCESS }
#         - { path: ^/api/character, roles: PUBLIC_ACCESS }
#         - { path: ^/api/comics/\d+, roles: PUBLIC_ACCESS }
#         - { path: ^/api/home-comics, roles: PUBLIC_ACCESS }
#         - { path: ^/api/search-comics, roles: PUBLIC_ACCESS }
#         - { path: ^/api/comics, roles: PUBLIC_ACCESS }
#         - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # ! ROUTES API
        - { path: ^/api/admin, roles: ROLE_ADMIN, methods: POST }
        - { path: ^/api/admin, roles: ROLE_ADMIN, methods: DELETE }
        - { path: ^/api/admin, roles: ROLE_ADMIN, methods: PUT }


    role_hierarchy:
        ROLE_ADMIN: ROLE_USER


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
